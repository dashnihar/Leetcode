import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class ExclusiveTimeofFunctions {
  public void executeexclusiveTime(){
    int n = 2;
    List< String > logs = new ArrayList<>();
    logs.add("0:start:0");
    logs.add("1:start:2");
    logs.add("1:end:5");
    logs.add("0:end:6");
    int[] result = exclusiveTime(n,logs);
    int[] result1 = result;
  }
  public int[] exclusiveTime(int n, List< String > logs){
    // ref: LeetCode 636. Exclusive Time of Functions Explanation and Solution
    // By : happygirlzt
    // Trick is have a stack and keep the functionId in he stack
    // Calculate the diff and push that to array for that functionId
    int[] result = new int[n];
    Stack<Integer> stack = new Stack();
    String[] log = logs.get(0).split(":");
    int prev = 0;
    int count = 0;
    while(count < logs.size()){
      log = logs.get(count).split(":");
      if(log[1].equals("start")){
        if(!stack.isEmpty()) {
          result[stack.peek()] += Integer.parseInt(log[2]) - prev;
          prev = Integer.parseInt(log[2]);
          stack.push(Integer.parseInt(log[0]));
        }else {
          stack.push(Integer.parseInt(log[0]));
          prev = Integer.parseInt(log[2]);
        }
      }else {
        result[stack.peek()] += Integer.parseInt(log[2]) - prev + 1;
        stack.pop();
        prev = Integer.parseInt(log[2]) + 1;
      }
      count++;
    }
    return result;
  }
}
